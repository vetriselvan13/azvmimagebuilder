To Connect the azure via powershell:
====================================

Connect-AzAccount
Get-AzSubscription
Set-AzContext -SubscriptionId


Register the providers:
=========================

# Register for Azure Image Builder Feature
Register-AzProviderFeature -FeatureName VirtualMachineTemplatePreview -ProviderNamespace Microsoft.VirtualMachineImages

Get-AzProviderFeature -FeatureName VirtualMachineTemplatePreview -ProviderNamespace Microsoft.VirtualMachineImages
# wait until RegistrationState is set to 'Registered'

# check you are registered for the providers, ensure RegistrationState is set to 'Registered'.
Get-AzResourceProvider -ProviderNamespace Microsoft.VirtualMachineImages | select -Property RegistrationState
Get-AzResourceProvider -ProviderNamespace Microsoft.Storage | select -Property RegistrationState 
Get-AzResourceProvider -ProviderNamespace Microsoft.Compute | select -Property RegistrationState
Get-AzResourceProvider -ProviderNamespace Microsoft.KeyVault | select -Property RegistrationState

# If they do not saw registered, run the commented out code below.

## Register-AzResourceProvider -ProviderNamespace Microsoft.VirtualMachineImages
## Register-AzResourceProvider -ProviderNamespace Microsoft.Storage
## Register-AzResourceProvider -ProviderNamespace Microsoft.Compute
## Register-AzResourceProvider -ProviderNamespace Microsoft.KeyVault



To Create the Resource Group and setting variables:
========================================================

# Step 1: Import module
Import-Module Az.Accounts

# Step 2: get existing context
$currentAzContext = Get-AzContext

# destination image resource group
$imageResourceGroup="uano-core-mongodb-imagetmplt-01"

# location (see possible locations in main docs)
$location="UAE North"

# your subscription, this will get your current subscription
$subscriptionID="c4ccac1b-5372-4dd2-bd87-b8e388b9324b"

# image template name
$imageTemplateName="uano-core-mongo-glodenimage-template"

# distribution properties object name (runOutput), i.e. this gives you the properties of the managed image on completion
$runOutputName="sigOutput"

# create resource group
New-AzResourceGroup -Name $imageResourceGroup -Location $location


To Create the user-assigned identity:
======================================

# setup role def names, these need to be unique

$imageRoleDefName="Azure Image Builder Image Definition"
$idenityName="uano-useridentity-imagetemplt"

## Add AZ PS modules to support AzUserAssignedIdentity and Az AIB
'Az.ImageBuilder', 'Az.ManagedServiceIdentity' | ForEach-Object {Install-Module -Name $_ -AllowPrerelease}

# create identity
New-AzUserAssignedIdentity -ResourceGroupName $imageResourceGroup -Name $idenityName

$idenityNameResourceId=$(Get-AzUserAssignedIdentity -ResourceGroupName $imageResourceGroup -Name $idenityName).Id
$idenityNamePrincipalId=$(Get-AzUserAssignedIdentity -ResourceGroupName $imageResourceGroup -Name $idenityName).PrincipalId


To Assign Roles to user-identity:
========================================

Select the respective subscription and go to Access control and click Add - Custom role. Create the custom role and add below permission:
      			Compute galleries (Microsoft compute)
			Compute galleries image versions
			compute images
Click Next - Select Scope - Select the respective resource group and click next and then click create.

Select the Resource group - Access control - Role - filter custom role - confirm whether created custom role is reflected here.

Select the user-assign identity and click azure role assignment - Add role assignment - scope is resource group - and select role which you created custom role.

Note: If the role not reflected, refresh the page and wait for some time.



To Create the shared image gallery:
===================================

$sigGalleryName= "uanomongodbimagegallary"
$imageDefName ="uano-mongodb-image"

# create gallery
New-AzGallery -GalleryName $sigGalleryName -ResourceGroupName $imageResourceGroup  -Location $location

# create gallery definition
New-AzGalleryImageDefinition -GalleryName $sigGalleryName -ResourceGroupName $imageResourceGroup -Location $location -Name $imageDefName -OsState generalized -OsType Linux -Publisher 'OpenLogic' -Offer 'CentOS' -Sku '8_5-gen2' -HyperVGeneration V2


Get-AzVMImageSku -Location uaenorth -PublisherName openLogic -Offer centos


To Create the Azure image builder (Image template):
====================================================

#Store your json template file into below location
$templateUrl="C:\Users\VetriSelvan\Downloads\VMSS\VMSS\imagetempl.json"
$templateFilePath = "imagetempl.json"

Invoke-WebRequest -Uri $templateUrl -OutFile $templateFilePath -UseBasicParsing

((Get-Content -path $templateFilePath -Raw) -replace '<subscriptionID>',$subscriptionID) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<rgName>',$imageResourceGroup) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<region>',$location) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<runOutputName>',$runOutputName) | Set-Content -Path $templateFilePath

((Get-Content -path $templateFilePath -Raw) -replace '<imageDefName>',$imageDefName) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<sharedImageGalName>',$sigGalleryName) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<region1>',$location) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<imgBuilderId>',$idenityNameResourceId) | Set-Content -Path $templateFilePath



New-AzResourceGroupDeployment -ResourceGroupName $imageResourceGroup -TemplateFile $templateFilePath -api-version "2020-02-14" -imageTemplateName $imageTemplateName -svclocation $location


# Optional - if you have any errors running the above, run:
$getStatus=$(Get-AzImageBuilderTemplate -ResourceGroupName $imageResourceGroup -Name $imageTemplateName)
$getStatus.ProvisioningErrorCode 
$getStatus.ProvisioningErrorMessage


To Create the image from this image template:
==============================================

#To install module
Install-Module az.imagebuilder


Start-AzImageBuilderTemplate -ResourceGroupName $imageResourceGroup -Name $imageTemplateName -NoWait

#Note, the command will not wait for the image builder service to complete the image build, you can query the status below.


$getStatus=$(Get-AzImageBuilderTemplate -ResourceGroupName $imageResourceGroup -Name $imageTemplateName)

# this shows all the properties
$getStatus | Format-List -Property *

# these show the status the build
$getStatus.LastRunStatusRunState 
$getStatus.LastRunStatusMessage
$getStatus.LastRunStatusRunSubState


Once Build done, Create the VM and VMSS.



To Clean up all above resources:
=================================

#Remove Image Template
Remove-AzImageBuilderTemplate -ResourceGroupName $imageResourceGroup -Name wvd10ImageTemplate

#Delete role assignment
Remove-AzRoleAssignment -ObjectId $idenityNamePrincipalId -RoleDefinitionName $imageRoleDefName -Scope "/subscriptions/$subscriptionID/resourceGroups/$imageResourceGroup"

## remove definitions
Remove-AzRoleDefinition -Name "$idenityNamePrincipalId" -Force -Scope "/subscriptions/$subscriptionID/resourceGroups/$imageResourceGroup"

## delete identity
Remove-AzUserAssignedIdentity -ResourceGroupName $imageResourceGroup -Name $idenityName -Force



#Delete Resource Group
Remove-AzResourceGroup $imageResourceGroup -Force










